@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<div class="text title text-center">
    <a>Welcome to the SignalR-based chat for yourself</a>
</div>
    <div class = "card space">
        <div class="chat">
        <div class="form-group">
            <label class="text">
                User:
                <input class="text-start" @bind="userInput" />
            </label>
        </div>
        <div class="form-group">
            <label class="text">
                Message:
                <input class="text-start" @bind="messageInput" size="50" />
            </label>
        </div>
        <button class="sendButton" @onclick="Send" disabled="@(!IsConnected)">Send</button>
        </div>
    </div>

    <div class="card chatSpace">
        <div class="row p-1">
            <div class="col-6">
            <ul id="messagesList">
                @foreach (var message in messages)
                {
                    <li>@message</li>
                }
            </ul>
            </div>
        </div>
    </div>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}