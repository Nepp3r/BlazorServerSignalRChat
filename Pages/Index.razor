@page "/"
@using BlazorServerSignalRApp.Models;
@using DataAccessLibrary;
@using DataAccessLibrary.Models;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IMessageData _db
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<div class="text title text-center">
    <a>Welcome to the SignalR-based chat for yourself</a>
</div>
    <div class = "card space">
        <div class="chat">
        
            <EditForm Model="@newMessage">
                <DataAnnotationsValidator />
                <ValidationSummary />

            <div class="form-group">
                <label class="text">
                    User:
                    <InputText id="userName" class="text-start" @bind-Value="newMessage.UserName" />
                </label>
            </div>

            <div class="form-group">
                <label class="text">
                    Message:
                    <InputText id="messageText" class="text-start" @bind-Value="newMessage.MessageText" size="50" />
                </label>
            </div>

            <button class="sendButton" @onclick="Send" disabled="@(!IsConnected)">Send</button>

            </EditForm>
        </div>
    </div>

    <div class="card chatSpace">
        <div class="row p-1">
            <div class="col-6">
            <ul id="messagesList">
                @if (messages == null)
                {
                    <p>Loading...</p>
                }
                else
                {
                    @foreach (var message in messages)
                    {
                        <li>@message.UserName : @message.MessageText <li class="oi-align-right">@message.SendTime</li></li>
                    }
                }
            </ul>
            </div>
        </div>
    </div>

@code {
    private HubConnection? hubConnection;
    private List<MessageModel> messages;
    private DisplayMessageModel newMessage = new DisplayMessageModel();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();
        messages = await _db.GetMessages();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            MessageModel NewMessage = new MessageModel
                {
                    UserName = newMessage.UserName,
                    MessageText = newMessage.MessageText,
					SendTime = DateTime.Now.ToString()
                };
            await _db.CreateNewMessage(NewMessage);
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            messages.Add(NewMessage);
            newMessage = new DisplayMessageModel();
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}